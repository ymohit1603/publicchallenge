// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum ChallengeStatus {
  ONGOING
  COMPLETED
  FAILED
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  username  String     @unique
  avatar    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  // Relations
  challenges Challenge[] @relation("CreatedChallenges")
  // New field to track if user has ongoing challenge
  hasOngoingChallenge Boolean @default(false)
  // Profile visitor tracking
  profileVisitCount Int @default(0)
  profileVisits UserProfileVisit[]

  @@index([email])
  @@index([username])
  @@index([hasOngoingChallenge])
  @@index([createdAt])
}

model Challenge {
  id            String          @id @default(uuid())
  title         String
  description   String
  category      String?
  duration      Int
  durationUnit  String          @default("days")
  status        ChallengeStatus @default(ONGOING)
  startDate     DateTime        @default(now())
  endDate       DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  // Relations
  creatorId     String
  creator       User     @relation("CreatedChallenges", fields: [creatorId], references: [id])
  tasks         Task[]
  
  // Visitor tracking
  visitorCount  Int      @default(0)
  visitHistory  ChallengeVisit[]

  // Challenge completion metrics
  completedTasksCount Int @default(0)
  totalTasksCount    Int @default(0)
  completionRate     Float? // Percentage of completion

  @@index([creatorId])
  @@index([status])
  @@index([createdAt])
  @@index([status, createdAt])
  @@index([creatorId, status])
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  isCompleted Boolean   @default(false)
  completedAt DateTime?
  
  // Relations
  challengeId String
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([challengeId])
}

model ChallengeVisit {
  id          String    @id @default(uuid())
  challengeId String
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  visitorIp   String
  visitedAt   DateTime  @default(now())

  @@index([challengeId])
  @@index([visitorIp])
  @@unique([challengeId, visitorIp])
}

model UserProfileVisit {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  visitorIp String
  visitedAt DateTime @default(now())

  @@index([userId])
  @@index([visitorIp])
  @@unique([userId, visitorIp])
}
